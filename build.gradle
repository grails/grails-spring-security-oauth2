buildscript {
	repositories {
		maven { url "https://repo.grails.org/grails/core" }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
		classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
	}
}

plugins {
    id 'maven-publish'
    id 'idea'
    id 'eclipse'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}


version project.projectVersion
group = 'org.grails.plugins'


apply plugin: "java-library"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-gsp"
apply plugin: "org.asciidoctor.jvm.convert"

repositories {
	mavenCentral()
	maven { url "https://repo.grails.org/grails/core" }
}

configurations {
	documentation
}

dependencies {
	compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
	compileOnly 'org.grails:grails-dependencies'
	compileOnly "org.grails:grails-plugin-services"
	api 'com.github.scribejava:scribejava-apis:8.3.3'
	api 'org.grails.plugins:spring-security-core:5.3.0'

	console "org.grails:grails-console"
	profile "org.grails.profiles:web-plugin"

	testImplementation "org.springframework.boot:spring-boot-autoconfigure"
	testImplementation "org.springframework.boot:spring-boot-starter-actuator"
	testImplementation "org.springframework.boot:spring-boot-starter-tomcat"
	testImplementation "cglib:cglib-nodep:2.2.2"
	testImplementation "org.grails:grails-gorm-testing-support"
	testImplementation "org.grails:grails-web-testing-support"

	documentation "com.github.javaparser:javaparser-core:3.15.14"
}

publishing {
	publications {
		maven(MavenPublication) {

			groupId = project.group
			artifactId = 'spring-security-oauth2'
			version = project.version

			from components.java

			artifact sourcesJar
			artifact javadocJar

			pom {
				name = 'Spring Security Oauth2 Plugin'
				description = 'This plugin provides the capability to authenticate via oauth and depends on grails-spring-security-core.'
				url = 'https://github.com/grails/grails-spring-security-oauth2'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'MatrixCrawler'
						name = 'Johannes Brunswicker'
						email = ''
					}
					developer {
						id = 'aitmanas'
						name = 'aitmanas'
						email = ''
					}
					developer {
						id = 'rvanderwerf'
						name = 'Ryan Vanderwerf'
						email = ''
					}
					developer {
						id = 'puneetbehl'
						name = 'Puneet Behl'
						email = ''
					}
				}
				scm {
					connection = 'scm:git:https://github.com/grails/grails-spring-security-oauth2.git'
					developerConnection = 'scm:git:https://github.com/grails/grails-spring-security-oauth2.git'
					url = 'https://github.com/grails/grails-spring-security-oauth2/tree/2.0.x'
				}
			}
		}


	}
}

//afterEvaluate {
//    signing {
//        //required { gradle.taskGraph.hasTask("publish") || gradle.taskGraph.hasTask("publishMavenPublicationToMavenLocal") }
//        sign publishing.publications.maven
//    }
//}

nexusPublishing {
	repositories {
		sonatype {
			def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
			def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
			def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
			nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
			snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
			username = ossUser
			password = ossPass
			stagingProfileId = ossStagingProfileId
		}
	}
}




tasks.withType(Test) {
	useJUnitPlatform()
}

def asciidoctorAttributes = [
		projectVersion  	: projectVersion,
		copyright           : 'Apache License, Version 2.0',
		docinfo1            : 'true',
		doctype             : 'book',
		encoding            : 'utf-8',
		'front-cover-image'  : 'image:cover.png[Front Cover,800,600]',
		icons               : 'font',
		id                  : project.name + ':' + project.version,
		idprefix            : '',
		idseparator         : '-',
		lang                : 'en',
		linkattrs           : true,
		numbered            : '',
		producer            : 'Asciidoctor',
		revnumber           : project.version,
		setanchors          : true,
		'source-highlighter' : 'prettify',
		toc                 : 'left',
		toc2                : '',
		toclevels           : '2'
]

asciidoctor {
	attributes asciidoctorAttributes
	baseDirFollowsSourceDir()
	outputDir new File(buildDir, 'docs')
	sourceDir = file('src/docs')
	sources {
		include 'index.adoc'
	}
}

tasks.register("docs") {
	description = "Generates documentation"
	group = "documentation"
	dependsOn(tasks.named("asciidoctor"))
	doLast {
		new File(buildDir, 'docs/ghpages.html') << file('src/docs/index.tmpl').text.replaceAll('@VERSION@', project.version)
	}
}

configure([groovydoc]) {
	classpath += configurations.documentation
}